import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.ArrayList;


public class GUI implements ActionListener
{
    JFrame window;
    JTextArea textArea;
    JScrollPane scrollPane;
    JMenuBar menuBar;
    JMenu menuFile, menuEdit, menuFormat, menuColor;
    JMenuItem iNew, iOpen, iSave, iSaveAs, iExit;
    JLabel date;
    JSeparator separator;
    JPopupMenu popupSaveAs;

    //containers of data
    ArrayList<Date> dates = new ArrayList<>();

    public static void main(String[] args)
    {
        new GUI(); //

    }

    //constructor class
    public GUI()
    {
        createWindow();
        createTextArea();
        createMenuBar();
        createFileMenu();
        window.setVisible(true); //set the window visible

        //adding ActionListeners for clickable items
        //which will activate some sort of function
        iNew.addActionListener(this);
        iOpen.addActionListener(this);
        iSave.addActionListener(this);
        iSaveAs.addActionListener(this);
        iExit.addActionListener(this);


    }

    //Method that generates the window for the notepad
    public void createWindow()
    {
        window = new JFrame("Notepad"); //top bar of window text
        window.setSize(800, 600); //size of window
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //window closes when clicking X

    }

    //Method that generates the text area for the notepad
    public void createTextArea()
    {
        textArea = new JTextArea();

        scrollPane = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setBorder(BorderFactory.createEmptyBorder()); //creates a general border for window (looks better imo but barely visible)
        window.add(scrollPane);
    }


    //Method that creates a bar at the top of the notepad with
    public void createMenuBar()
    {
        menuBar = new JMenuBar();
        window.setJMenuBar(menuBar);

        menuFile = new JMenu("File");
        menuBar.add(menuFile);

        menuEdit = new JMenu("Edit");
        menuBar.add(menuEdit);

        menuFormat = new JMenu("Format");
        menuBar.add(menuFormat);

        menuColor = new JMenu("Color");
        menuBar.add(menuColor);

        separator = new JSeparator();
        menuBar.add(separator);

        date = new JLabel("Last saved:");
        menuBar.add(date);

        popupSaveAs = new JPopupMenu();
        popupSaveAs.add(new JMenuItem("Item 1"));


    }

    //Method to add & hold the items listed in the file section
    public void createFileMenu()
    {
        iNew = new JMenuItem("New");
        menuFile.add(iNew);

        iOpen = new JMenuItem("Open");
        menuFile.add(iOpen);

        iSave = new JMenuItem("Save");
        menuFile.add(iSave);

        iSaveAs = new JMenuItem("Save As");
        menuFile.add(iSaveAs);

        iExit = new JMenuItem("Exit");
        menuFile.add(iExit);
    }


    @Override
    public void actionPerformed(ActionEvent e) {

        if (e.getSource() == iSave)
        {


        }

        if (e.getSource() == iSaveAs)
        {
            popupSaveAs.show(textArea, 0, textArea.getDocument().getLength());
            date.setText("Last saved: " + new Date());
            dates.add(new Date());

        }
    }


}

//Logging all of my changes:
//Added date label
//Added separator inbetween actual menu items and date labeled
//Added actionListener to each pressed button (at least for File)
//Created response in actionPerformed to save date and display it
//uses arrayList which I will later make a file system for, only works for SaveAs
//Popup menu appears when SaveAs is clicked, only serves as displaying "Item 1"
